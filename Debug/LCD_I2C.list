
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff0  08002ff0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003070  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fa1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000166d  00000000  00000000  0002a041  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b6f  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007883  00000000  00000000  0004d207  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8b60  00000000  00000000  00054a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d5ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c8  00000000  00000000  0010d668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f70 	.word	0x08002f70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002f70 	.word	0x08002f70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN17LiquidCrystal_I2CC1EP19__I2C_HandleTypeDefhhh>:
//
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal_I2C::LiquidCrystal_I2C(I2C_HandleTypeDef* hi2c, uint8_t addr, uint8_t lcd_cols,uint8_t lcd_rows)
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	460b      	mov	r3, r1
 8000580:	71fb      	strb	r3, [r7, #7]
 8000582:	4613      	mov	r3, r2
 8000584:	71bb      	strb	r3, [r7, #6]
{
  _hi2c = hi2c;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	601a      	str	r2, [r3, #0]
  _addr = addr;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	711a      	strb	r2, [r3, #4]
  _cols = lcd_cols;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	79ba      	ldrb	r2, [r7, #6]
 8000596:	725a      	strb	r2, [r3, #9]
  _rows = lcd_rows;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	7e3a      	ldrb	r2, [r7, #24]
 800059c:	729a      	strb	r2, [r3, #10]
  _backlightval = LCD_NOBACKLIGHT;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2200      	movs	r2, #0
 80005a2:	72da      	strb	r2, [r3, #11]
}
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4618      	mov	r0, r3
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_ZN17LiquidCrystal_I2C4initEv>:

void LiquidCrystal_I2C::init(){
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	init_priv();
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f804 	bl	80005c8 <_ZN17LiquidCrystal_I2C9init_privEv>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN17LiquidCrystal_I2C9init_privEv>:

void LiquidCrystal_I2C::init_priv()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	715a      	strb	r2, [r3, #5]
	begin(_cols, _rows);  
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7a59      	ldrb	r1, [r3, #9]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7a9a      	ldrb	r2, [r3, #10]
 80005de:	2300      	movs	r3, #0
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f804 	bl	80005ee <_ZN17LiquidCrystal_I2C5beginEhhh>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZN17LiquidCrystal_I2C5beginEhhh>:

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	4608      	mov	r0, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	461a      	mov	r2, r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	70fb      	strb	r3, [r7, #3]
 8000600:	460b      	mov	r3, r1
 8000602:	70bb      	strb	r3, [r7, #2]
 8000604:	4613      	mov	r3, r2
 8000606:	707b      	strb	r3, [r7, #1]
	if (lines > 1) {
 8000608:	78bb      	ldrb	r3, [r7, #2]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d906      	bls.n	800061c <_ZN17LiquidCrystal_I2C5beginEhhh+0x2e>
		_displayfunction |= LCD_2LINE;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	b2da      	uxtb	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	715a      	strb	r2, [r3, #5]
	}
	_numlines = lines;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	78ba      	ldrb	r2, [r7, #2]
 8000620:	721a      	strb	r2, [r3, #8]

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
 8000622:	787b      	ldrb	r3, [r7, #1]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d009      	beq.n	800063c <_ZN17LiquidCrystal_I2C5beginEhhh+0x4e>
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <_ZN17LiquidCrystal_I2C5beginEhhh+0x4e>
		_displayfunction |= LCD_5x10DOTS;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	715a      	strb	r2, [r3, #5]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 fc0d 	bl	8000e5c <HAL_Delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7adb      	ldrb	r3, [r3, #11]
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f928 	bl	800089e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	HAL_Delay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000652:	f000 fc03 	bl	8000e5c <HAL_Delay>
	   write4bits(0x03 << 4);
	   write4bits(0x03 << 4);
	   write4bits(0x03 << 4);
	   write4bits(0x02 << 4);
*/
	   pulseEnable(0x03 << 4);
 8000656:	2130      	movs	r1, #48	; 0x30
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f933 	bl	80008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
	   pulseEnable(0x03 << 4);
 800065e:	2130      	movs	r1, #48	; 0x30
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f92f 	bl	80008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
	   pulseEnable(0x03 << 4);
 8000666:	2130      	movs	r1, #48	; 0x30
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f92b 	bl	80008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
	   pulseEnable(0x02 << 4);
 800066e:	2120      	movs	r1, #32
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f927 	bl	80008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f893 	bl	80007ae <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2204      	movs	r2, #4
 800068c:	719a      	strb	r2, [r3, #6]
	display();
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f866 	bl	8000760 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f813 	bl	80006c0 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2202      	movs	r2, #2
 800069e:	71da      	strb	r2, [r3, #7]
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	79db      	ldrb	r3, [r3, #7]
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f87e 	bl	80007ae <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f813 	bl	80006de <_ZN17LiquidCrystal_I2C4homeEv>
  
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_ZN17LiquidCrystal_I2C5clearEv>:

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f86f 	bl	80007ae <_ZN17LiquidCrystal_I2C7commandEh>
	HAL_Delay(2);  // this command takes a long time!
 80006d0:	2002      	movs	r0, #2
 80006d2:	f000 fbc3 	bl	8000e5c <HAL_Delay>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_ZN17LiquidCrystal_I2C4homeEv>:

void LiquidCrystal_I2C::home(){
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	command(LCD_RETURNHOME);  // set cursor position to zero
 80006e6:	2102      	movs	r1, #2
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f860 	bl	80007ae <_ZN17LiquidCrystal_I2C7commandEh>
	HAL_Delay(2);  // this command takes a long time!
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fbb4 	bl	8000e5c <HAL_Delay>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZN17LiquidCrystal_I2C9setCursorEhh>:

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
 8000708:	4613      	mov	r3, r2
 800070a:	70bb      	strb	r3, [r7, #2]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x60>)
 800070e:	f107 0408 	add.w	r4, r7, #8
 8000712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if ( row > _numlines ) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a1b      	ldrb	r3, [r3, #8]
 800071c:	78ba      	ldrb	r2, [r7, #2]
 800071e:	429a      	cmp	r2, r3
 8000720:	d903      	bls.n	800072a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x2e>
		row = _numlines-1;    // we count rows starting w/0
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7a1b      	ldrb	r3, [r3, #8]
 8000726:	3b01      	subs	r3, #1
 8000728:	70bb      	strb	r3, [r7, #2]
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800072a:	78bb      	ldrb	r3, [r7, #2]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	f107 0218 	add.w	r2, r7, #24
 8000732:	4413      	add	r3, r2
 8000734:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	4413      	add	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	b25b      	sxtb	r3, r3
 8000742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f82e 	bl	80007ae <_ZN17LiquidCrystal_I2C7commandEh>
}
 8000752:	bf00      	nop
 8000754:	371c      	adds	r7, #28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	bf00      	nop
 800075c:	08002f88 	.word	0x08002f88

08000760 <_ZN17LiquidCrystal_I2C7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal_I2C::noDisplay() {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal_I2C::display() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	_displaycontrol |= LCD_DISPLAYON;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	799b      	ldrb	r3, [r3, #6]
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	b2da      	uxtb	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	719a      	strb	r2, [r3, #6]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	799b      	ldrb	r3, [r3, #6]
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f813 	bl	80007ae <_ZN17LiquidCrystal_I2C7commandEh>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN17LiquidCrystal_I2C9backlightEv>:
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	_backlightval=LCD_BACKLIGHT;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2208      	movs	r2, #8
 800079c:	72da      	strb	r2, [r3, #11]
	expanderWrite(0);
 800079e:	2100      	movs	r1, #0
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f87c 	bl	800089e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_ZN17LiquidCrystal_I2C7commandEh>:



/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	460b      	mov	r3, r1
 80007b8:	70fb      	strb	r3, [r7, #3]
	send(value, 0);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f847 	bl	8000854 <_ZN17LiquidCrystal_I2C4sendEhh>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_ZN17LiquidCrystal_I2C6printfEPKcz>:


/************ low level data pushing commands **********/

void LiquidCrystal_I2C::printf(const char* fmt, ...)
{
 80007ce:	b40e      	push	{r1, r2, r3}
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0c5      	sub	sp, #276	; 0x114
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	6018      	str	r0, [r3, #0]
    char buff[256];
    va_list args;
    va_start(args, fmt);
 80007da:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	f001 ffc7 	bl	8002788 <vsniprintf>

    char* c = buff;
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    while ( *c )
 8000802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00b      	beq.n	8000824 <_ZN17LiquidCrystal_I2C6printfEPKcz+0x56>
    	putchar( *c++ );
 800080c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4611      	mov	r1, r2
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	f000 f809 	bl	8000834 <_ZN17LiquidCrystal_I2C7putcharEh>
    while ( *c )
 8000822:	e7ee      	b.n	8000802 <_ZN17LiquidCrystal_I2C6printfEPKcz+0x34>

    va_end(args);
}
 8000824:	bf00      	nop
 8000826:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800082a:	46bd      	mov	sp, r7
 800082c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000830:	b003      	add	sp, #12
 8000832:	4770      	bx	lr

08000834 <_ZN17LiquidCrystal_I2C7putcharEh>:

void LiquidCrystal_I2C::putchar( uint8_t data )
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	send( data, Rs );
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f804 	bl	8000854 <_ZN17LiquidCrystal_I2C4sendEhh>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN17LiquidCrystal_I2C4sendEhh>:

void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
 8000860:	4613      	mov	r3, r2
 8000862:	70bb      	strb	r3, [r7, #2]
	uint8_t highnib=value&0xf0;
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	f023 030f 	bic.w	r3, r3, #15
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib=(value<<4)&0xf0;
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	b2db      	uxtb	r3, r3
 8000874:	73bb      	strb	r3, [r7, #14]
    pulseEnable((highnib)|mode);
 8000876:	7bfa      	ldrb	r2, [r7, #15]
 8000878:	78bb      	ldrb	r3, [r7, #2]
 800087a:	4313      	orrs	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f81f 	bl	80008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
	pulseEnable((lownib)|mode);
 8000886:	7bba      	ldrb	r2, [r7, #14]
 8000888:	78bb      	ldrb	r3, [r7, #2]
 800088a:	4313      	orrs	r3, r2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f817 	bl	80008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_ZN17LiquidCrystal_I2C13expanderWriteEh>:


void LiquidCrystal_I2C::expanderWrite(uint8_t _data)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	70fb      	strb	r3, [r7, #3]
	writeI2C((int)(_data) | _backlightval);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7ada      	ldrb	r2, [r3, #11]
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f829 	bl	800090e <_ZN17LiquidCrystal_I2C8writeI2CEh>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

// Write the data with the Enable bit first set and
// then repeat the write with Enable unset

void LiquidCrystal_I2C::pulseEnable(uint8_t _data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	writeI2C(_data | En | _backlightval);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7ada      	ldrb	r2, [r3, #11]
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 f813 	bl	800090e <_ZN17LiquidCrystal_I2C8writeI2CEh>
	writeI2C((_data & ~En) | _backlightval );
 80008e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008ec:	f023 0304 	bic.w	r3, r3, #4
 80008f0:	b25a      	sxtb	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7adb      	ldrb	r3, [r3, #11]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 f804 	bl	800090e <_ZN17LiquidCrystal_I2C8writeI2CEh>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_ZN17LiquidCrystal_I2C8writeI2CEh>:


uint8_t LiquidCrystal_I2C::writeI2C(uint8_t data)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af02      	add	r7, sp, #8
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(_hi2c, (uint16_t)(_addr<<1), 3, 100) != HAL_OK) { }
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	b29b      	uxth	r3, r3
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	b299      	uxth	r1, r3
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2203      	movs	r2, #3
 8000930:	f000 ff6c 	bl	800180c <HAL_I2C_IsDeviceReady>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d000      	beq.n	8000946 <_ZN17LiquidCrystal_I2C8writeI2CEh+0x38>
 8000944:	e7eb      	b.n	800091e <_ZN17LiquidCrystal_I2C8writeI2CEh+0x10>


	status = HAL_I2C_Master_Transmit(
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6818      	ldr	r0, [r3, #0]
			_hi2c,
			(uint8_t)(_addr<<1),
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
	status = HAL_I2C_Master_Transmit(
 8000952:	b299      	uxth	r1, r3
 8000954:	1cfa      	adds	r2, r7, #3
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	f000 fe58 	bl	8001610 <HAL_I2C_Master_Transmit>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
			&data,
			1,
			100
			);

    return status;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 f9ff 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f82b 	bl	80009d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f8c5 	bl	8000b0c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000982:	f000 f88f 	bl	8000aa4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  LiquidCrystal_I2C lcd(&hi2c1);
 8000986:	1d38      	adds	r0, r7, #4
 8000988:	2302      	movs	r3, #2
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2310      	movs	r3, #16
 800098e:	2227      	movs	r2, #39	; 0x27
 8000990:	490e      	ldr	r1, [pc, #56]	; (80009cc <main+0x5c>)
 8000992:	f7ff fded 	bl	8000570 <_ZN17LiquidCrystal_I2CC1EP19__I2C_HandleTypeDefhhh>
  lcd.init();
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe0a 	bl	80005b2 <_ZN17LiquidCrystal_I2C4initEv>
  lcd.backlight();
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fef5 	bl	8000790 <_ZN17LiquidCrystal_I2C9backlightEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bool flg = false;
 80009a6:	2300      	movs	r3, #0
 80009a8:	74fb      	strb	r3, [r7, #19]

  int i = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  while (1)
  {
	  lcd.setCursor(0,0);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fea1 	bl	80006fc <_ZN17LiquidCrystal_I2C9setCursorEhh>
	  lcd.printf( "Count: %4d", i++ );
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	1d38      	adds	r0, r7, #4
 80009c2:	461a      	mov	r2, r3
 80009c4:	4902      	ldr	r1, [pc, #8]	; (80009d0 <main+0x60>)
 80009c6:	f7ff ff02 	bl	80007ce <_ZN17LiquidCrystal_I2C6printfEPKcz>
	  lcd.setCursor(0,0);
 80009ca:	e7f0      	b.n	80009ae <main+0x3e>
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	08002f98 	.word	0x08002f98

080009d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fe9c 	bl	8002720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <_Z18SystemClock_Configv+0xc8>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <_Z18SystemClock_Configv+0xc8>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <_Z18SystemClock_Configv+0xc8>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <_Z18SystemClock_Configv+0xcc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <_Z18SystemClock_Configv+0xcc>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <_Z18SystemClock_Configv+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fa19 	bl	8001e7c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000a5a:	f000 f871 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fc6f 	bl	800235c <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8000a8e:	f000 f857 	bl	8000b40 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <_ZL12MX_I2C1_Initv+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ab0:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <_ZL12MX_I2C1_Initv+0x64>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ae2:	f000 fc5d 	bl	80013a0 <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf14      	ite	ne
 8000aec:	2301      	movne	r3, #1
 8000aee:	2300      	moveq	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000af6:	f000 f823 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000008c 	.word	0x2000008c
 8000b04:	40005400 	.word	0x40005400
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <_ZL12MX_GPIO_Initv+0x30>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <_ZL12MX_GPIO_Initv+0x30>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <_ZL12MX_GPIO_Initv+0x30>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_I2C_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12b      	bne.n	8000c1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_I2C_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_I2C_MspInit+0x88>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <HAL_I2C_MspInit+0x8c>)
 8000bfa:	f000 fa37 	bl	800106c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_I2C_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_I2C_MspInit+0x88>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_I2C_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40005400 	.word	0x40005400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f8ca 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f001 fd06 	bl	80026cc <__errno>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20020000 	.word	0x20020000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	200000e0 	.word	0x200000e0
 8000cf4:	200000f8 	.word	0x200000f8

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <SystemInit+0x28>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <SystemInit+0x28>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SystemInit+0x28>)
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d12:	609a      	str	r2, [r3, #8]
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d2a:	e003      	b.n	8000d34 <LoopCopyDataInit>

08000d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d32:	3104      	adds	r1, #4

08000d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d3c:	d3f6      	bcc.n	8000d2c <CopyDataInit>
  ldr  r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d40:	e002      	b.n	8000d48 <LoopFillZerobss>

08000d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d44:	f842 3b04 	str.w	r3, [r2], #4

08000d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d4c:	d3f9      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffd3 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f001 fcc1 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fe0b 	bl	8000970 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d60:	08003000 	.word	0x08003000
  ldr  r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d68:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d6c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d70:	200000f4 	.word	0x200000f4

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f92f 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fed0 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f939 	bl	8001052 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	f000 f90f 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	200000ec 	.word	0x200000ec

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200000ec 	.word	0x200000ec

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_Delay+0x40>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff47 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff5c 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb0 	bl	8000fc0 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e16b      	b.n	8001360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 815a 	bne.w	800135a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d00b      	beq.n	80010c6 <HAL_GPIO_Init+0x5a>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ba:	2b11      	cmp	r3, #17
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b12      	cmp	r3, #18
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0xfc>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b12      	cmp	r3, #18
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80b4 	beq.w	800135a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_GPIO_Init+0x308>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a5e      	ldr	r2, [pc, #376]	; (8001374 <HAL_GPIO_Init+0x308>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x308>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x30c>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a51      	ldr	r2, [pc, #324]	; (800137c <HAL_GPIO_Init+0x310>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_GPIO_Init+0x314>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x318>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x31c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x21a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x320>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x216>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x324>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x212>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x328>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x32c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x20a>
 8001272:	2307      	movs	r3, #7
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001276:	2308      	movs	r3, #8
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4934      	ldr	r1, [pc, #208]	; (8001378 <HAL_GPIO_Init+0x30c>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <HAL_GPIO_Init+0x330>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d6:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_GPIO_Init+0x330>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_GPIO_Init+0x330>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001300:	4a26      	ldr	r2, [pc, #152]	; (800139c <HAL_GPIO_Init+0x330>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_GPIO_Init+0x330>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_GPIO_Init+0x330>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_GPIO_Init+0x330>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_GPIO_Init+0x330>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae90 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	; 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40021c00 	.word	0x40021c00
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e11f      	b.n	80015f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fbea 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	; 0x24
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001404:	f001 f94e 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8001408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a7b      	ldr	r2, [pc, #492]	; (80015fc <HAL_I2C_Init+0x25c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d807      	bhi.n	8001424 <HAL_I2C_Init+0x84>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a7a      	ldr	r2, [pc, #488]	; (8001600 <HAL_I2C_Init+0x260>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e006      	b.n	8001432 <HAL_I2C_Init+0x92>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a77      	ldr	r2, [pc, #476]	; (8001604 <HAL_I2C_Init+0x264>)
 8001428:	4293      	cmp	r3, r2
 800142a:	bf94      	ite	ls
 800142c:	2301      	movls	r3, #1
 800142e:	2300      	movhi	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0db      	b.n	80015f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4a72      	ldr	r2, [pc, #456]	; (8001608 <HAL_I2C_Init+0x268>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a64      	ldr	r2, [pc, #400]	; (80015fc <HAL_I2C_Init+0x25c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d802      	bhi.n	8001474 <HAL_I2C_Init+0xd4>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3301      	adds	r3, #1
 8001472:	e009      	b.n	8001488 <HAL_I2C_Init+0xe8>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a63      	ldr	r2, [pc, #396]	; (800160c <HAL_I2C_Init+0x26c>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	3301      	adds	r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	430b      	orrs	r3, r1
 800148e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800149a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4956      	ldr	r1, [pc, #344]	; (80015fc <HAL_I2C_Init+0x25c>)
 80014a4:	428b      	cmp	r3, r1
 80014a6:	d80d      	bhi.n	80014c4 <HAL_I2C_Init+0x124>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e59      	subs	r1, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	bf38      	it	cc
 80014c0:	2304      	movcc	r3, #4
 80014c2:	e04f      	b.n	8001564 <HAL_I2C_Init+0x1c4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_I2C_Init+0x150>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e58      	subs	r0, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	e012      	b.n	8001516 <HAL_I2C_Init+0x176>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	0099      	lsls	r1, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x17e>
 800151a:	2301      	movs	r3, #1
 800151c:	e022      	b.n	8001564 <HAL_I2C_Init+0x1c4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10e      	bne.n	8001544 <HAL_I2C_Init+0x1a4>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e58      	subs	r0, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6859      	ldr	r1, [r3, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	440b      	add	r3, r1
 8001534:	fbb0 f3f3 	udiv	r3, r0, r3
 8001538:	3301      	adds	r3, #1
 800153a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	e00f      	b.n	8001564 <HAL_I2C_Init+0x1c4>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	0099      	lsls	r1, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	6809      	ldr	r1, [r1, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6911      	ldr	r1, [r2, #16]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68d2      	ldr	r2, [r2, #12]
 800159e:	4311      	orrs	r1, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	001e847f 	.word	0x001e847f
 8001604:	003d08ff 	.word	0x003d08ff
 8001608:	431bde83 	.word	0x431bde83
 800160c:	10624dd3 	.word	0x10624dd3

08001610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	461a      	mov	r2, r3
 800161c:	460b      	mov	r3, r1
 800161e:	817b      	strh	r3, [r7, #10]
 8001620:	4613      	mov	r3, r2
 8001622:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fc0e 	bl	8000e44 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	f040 80e0 	bne.w	80017f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2319      	movs	r3, #25
 800163e:	2201      	movs	r2, #1
 8001640:	4970      	ldr	r1, [pc, #448]	; (8001804 <HAL_I2C_Master_Transmit+0x1f4>)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 fa92 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
 8001650:	e0d3      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_I2C_Master_Transmit+0x50>
 800165c:	2302      	movs	r3, #2
 800165e:	e0cc      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d007      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001694:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2221      	movs	r2, #33	; 0x21
 800169a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2210      	movs	r2, #16
 80016a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	893a      	ldrh	r2, [r7, #8]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_I2C_Master_Transmit+0x1f8>)
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c8:	8979      	ldrh	r1, [r7, #10]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6a3a      	ldr	r2, [r7, #32]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f9ca 	bl	8001a68 <I2C_MasterRequestWrite>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e08d      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016f4:	e066      	b.n	80017c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fb0c 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2b04      	cmp	r3, #4
 800170c:	d107      	bne.n	800171e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06b      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b04      	cmp	r3, #4
 800175e:	d11b      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x188>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d017      	beq.n	8001798 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	6a39      	ldr	r1, [r7, #32]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fafc 	bl	8001d9a <I2C_WaitOnBTFFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d107      	bne.n	80017c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e01a      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d194      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00100002 	.word	0x00100002
 8001808:	ffff0000 	.word	0xffff0000

0800180c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff fb12 	bl	8000e44 <HAL_GetTick>
 8001820:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b20      	cmp	r3, #32
 8001830:	f040 8110 	bne.w	8001a54 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2319      	movs	r3, #25
 800183a:	2201      	movs	r2, #1
 800183c:	4988      	ldr	r1, [pc, #544]	; (8001a60 <HAL_I2C_IsDeviceReady+0x254>)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f994 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800184a:	2302      	movs	r3, #2
 800184c:	e103      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2C_IsDeviceReady+0x50>
 8001858:	2302      	movs	r3, #2
 800185a:	e0fc      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d007      	beq.n	8001882 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2224      	movs	r2, #36	; 0x24
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a70      	ldr	r2, [pc, #448]	; (8001a64 <HAL_I2C_IsDeviceReady+0x258>)
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f952 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0b6      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018f6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff faa4 	bl	8000e44 <HAL_GetTick>
 80018fc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b02      	cmp	r3, #2
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800192c:	e025      	b.n	800197a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800192e:	f7ff fa89 	bl	8000e44 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d302      	bcc.n	8001944 <HAL_I2C_IsDeviceReady+0x138>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	22a0      	movs	r2, #160	; 0xa0
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2ba0      	cmp	r3, #160	; 0xa0
 8001984:	d005      	beq.n	8001992 <HAL_I2C_IsDeviceReady+0x186>
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <HAL_I2C_IsDeviceReady+0x186>
 800198c:	7dbb      	ldrb	r3, [r7, #22]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0cd      	beq.n	800192e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d129      	bne.n	80019fc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2319      	movs	r3, #25
 80019d4:	2201      	movs	r2, #1
 80019d6:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_I2C_IsDeviceReady+0x254>)
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f8c7 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e036      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e02c      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a14:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2319      	movs	r3, #25
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4910      	ldr	r1, [pc, #64]	; (8001a60 <HAL_I2C_IsDeviceReady+0x254>)
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f8a3 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e012      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	f4ff af33 	bcc.w	80018a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	00100002 	.word	0x00100002
 8001a64:	ffff0000 	.word	0xffff0000

08001a68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	460b      	mov	r3, r1
 8001a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d006      	beq.n	8001a92 <I2C_MasterRequestWrite+0x2a>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <I2C_MasterRequestWrite+0x2a>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a90:	d108      	bne.n	8001aa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00b      	b.n	8001abc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	d107      	bne.n	8001abc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f84f 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00c      	beq.n	8001aee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e035      	b.n	8001b5a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af6:	d108      	bne.n	8001b0a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b06:	611a      	str	r2, [r3, #16]
 8001b08:	e01b      	b.n	8001b42 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	11db      	asrs	r3, r3, #7
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f003 0306 	and.w	r3, r3, #6
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f063 030f 	orn	r3, r3, #15
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	490f      	ldr	r1, [pc, #60]	; (8001b64 <I2C_MasterRequestWrite+0xfc>)
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f876 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e010      	b.n	8001b5a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b38:	897b      	ldrh	r3, [r7, #10]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <I2C_MasterRequestWrite+0x100>)
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f866 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	00010008 	.word	0x00010008
 8001b68:	00010002 	.word	0x00010002

08001b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	e025      	b.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b84:	d021      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7ff f95d 	bl	8000e44 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d116      	bne.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e023      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10d      	bne.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4013      	ands	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	e00c      	b.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d0b6      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c28:	e051      	b.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c38:	d123      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0204 	orr.w	r2, r3, #4
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e046      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c88:	d021      	beq.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7ff f8db 	bl	8000e44 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f043 0220 	orr.w	r2, r3, #32
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e020      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e00b      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d18d      	bne.n	8001c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d24:	e02d      	b.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f878 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e02d      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3c:	d021      	beq.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f881 	bl	8000e44 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d116      	bne.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e007      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d1ca      	bne.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da6:	e02d      	b.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f837 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e02d      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dbe:	d021      	beq.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc0:	f7ff f840 	bl	8000e44 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d302      	bcc.n	8001dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d1ca      	bne.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e32:	d11b      	bne.n	8001e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e25b      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d075      	beq.n	8001f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9a:	4ba3      	ldr	r3, [pc, #652]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea6:	4ba0      	ldr	r3, [pc, #640]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d112      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4b9d      	ldr	r3, [pc, #628]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	4b99      	ldr	r3, [pc, #612]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d05b      	beq.n	8001f84 <HAL_RCC_OscConfig+0x108>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d157      	bne.n	8001f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e236      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x74>
 8001ee2:	4b91      	ldr	r3, [pc, #580]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a90      	ldr	r2, [pc, #576]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xb0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x98>
 8001efa:	4b8b      	ldr	r3, [pc, #556]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a8a      	ldr	r2, [pc, #552]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a87      	ldr	r2, [pc, #540]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xb0>
 8001f14:	4b84      	ldr	r3, [pc, #528]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a83      	ldr	r2, [pc, #524]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a80      	ldr	r2, [pc, #512]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe ff86 	bl	8000e44 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ff82 	bl	8000e44 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1fb      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xc0>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe ff72 	bl	8000e44 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe ff6e 	bl	8000e44 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1e7      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0xe8>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x152>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1bb      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4952      	ldr	r1, [pc, #328]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCC_OscConfig+0x2b0>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe ff27 	bl	8000e44 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe ff23 	bl	8000e44 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e19c      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4940      	ldr	r1, [pc, #256]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x2b0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe ff06 	bl	8000e44 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe ff02 	bl	8000e44 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e17b      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d030      	beq.n	80020c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_RCC_OscConfig+0x2b4>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7fe fee6 	bl	8000e44 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207c:	f7fe fee2 	bl	8000e44 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e15b      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x200>
 800209a:	e015      	b.n	80020c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_OscConfig+0x2b4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fecf 	bl	8000e44 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe fecb 	bl	8000e44 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e144      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a0 	beq.w	8002216 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x2b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d121      	bne.n	8002156 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x2b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_RCC_OscConfig+0x2b8>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe fe91 	bl	8000e44 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e011      	b.n	800214a <HAL_RCC_OscConfig+0x2ce>
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	42470000 	.word	0x42470000
 8002130:	42470e80 	.word	0x42470e80
 8002134:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7fe fe84 	bl	8000e44 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0fd      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <HAL_RCC_OscConfig+0x4d4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d106      	bne.n	800216c <HAL_RCC_OscConfig+0x2f0>
 800215e:	4b7d      	ldr	r3, [pc, #500]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a7c      	ldr	r2, [pc, #496]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x32a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x312>
 8002174:	4b77      	ldr	r3, [pc, #476]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a76      	ldr	r2, [pc, #472]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	4b74      	ldr	r3, [pc, #464]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a73      	ldr	r2, [pc, #460]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x32a>
 800218e:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a70      	ldr	r2, [pc, #448]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a6d      	ldr	r2, [pc, #436]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7fe fe49 	bl	8000e44 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fe45 	bl	8000e44 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0bc      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x33a>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe fe33 	bl	8000e44 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fe2f 	bl	8000e44 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0a6      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b56      	ldr	r3, [pc, #344]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b52      	ldr	r3, [pc, #328]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a51      	ldr	r2, [pc, #324]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8092 	beq.w	8002344 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d05c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d141      	bne.n	80022b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fe03 	bl	8000e44 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fdff 	bl	8000e44 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e078      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	019b      	lsls	r3, r3, #6
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	061b      	lsls	r3, r3, #24
 8002284:	4933      	ldr	r1, [pc, #204]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228a:	4b33      	ldr	r3, [pc, #204]	; (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fdd8 	bl	8000e44 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fdd4 	bl	8000e44 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e04d      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x41c>
 80022b6:	e045      	b.n	8002344 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fdc1 	bl	8000e44 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fdbd 	bl	8000e44 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e036      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x44a>
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e029      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	429a      	cmp	r2, r3
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d115      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231a:	4013      	ands	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002320:	4293      	cmp	r3, r2
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000
 8002354:	40023800 	.word	0x40023800
 8002358:	42470060 	.word	0x42470060

0800235c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0cc      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d90c      	bls.n	8002398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b8      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	494d      	ldr	r1, [pc, #308]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d044      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d119      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d003      	beq.n	800241a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	2b03      	cmp	r3, #3
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e067      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4934      	ldr	r1, [pc, #208]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fcfa 	bl	8000e44 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fcf6 	bl	8000e44 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e04f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d20c      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e032      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4916      	ldr	r1, [pc, #88]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e2:	f000 f821 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e6:	4601      	mov	r1, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fc5a 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00
 8002518:	40023800 	.word	0x40023800
 800251c:	08002fa4 	.word	0x08002fa4
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d007      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x32>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d008      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x38>
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 808d 	bne.w	800266e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002556:	60bb      	str	r3, [r7, #8]
       break;
 8002558:	e08c      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 800255c:	60bb      	str	r3, [r7, #8]
      break;
 800255e:	e089      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b42      	ldr	r3, [pc, #264]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	ea03 0501 	and.w	r5, r3, r1
 800258c:	ea04 0602 	and.w	r6, r4, r2
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 8002592:	fb02 f106 	mul.w	r1, r2, r6
 8002596:	2200      	movs	r2, #0
 8002598:	fb02 f205 	mul.w	r2, r2, r5
 800259c:	440a      	add	r2, r1
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 80025a0:	fba5 0101 	umull	r0, r1, r5, r1
 80025a4:	1853      	adds	r3, r2, r1
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f04f 0400 	mov.w	r4, #0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	f7fd fe5d 	bl	8000270 <__aeabi_uldivmod>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e049      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	f04f 0400 	mov.w	r4, #0
 80025c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	ea03 0501 	and.w	r5, r3, r1
 80025d4:	ea04 0602 	and.w	r6, r4, r2
 80025d8:	4629      	mov	r1, r5
 80025da:	4632      	mov	r2, r6
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	0154      	lsls	r4, r2, #5
 80025e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ea:	014b      	lsls	r3, r1, #5
 80025ec:	4619      	mov	r1, r3
 80025ee:	4622      	mov	r2, r4
 80025f0:	1b49      	subs	r1, r1, r5
 80025f2:	eb62 0206 	sbc.w	r2, r2, r6
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	0194      	lsls	r4, r2, #6
 8002600:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002604:	018b      	lsls	r3, r1, #6
 8002606:	1a5b      	subs	r3, r3, r1
 8002608:	eb64 0402 	sbc.w	r4, r4, r2
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800261a:	00d9      	lsls	r1, r3, #3
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	195b      	adds	r3, r3, r5
 8002622:	eb44 0406 	adc.w	r4, r4, r6
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	02a2      	lsls	r2, r4, #10
 8002630:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002634:	0299      	lsls	r1, r3, #10
 8002636:	460b      	mov	r3, r1
 8002638:	4614      	mov	r4, r2
 800263a:	4618      	mov	r0, r3
 800263c:	4621      	mov	r1, r4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f04f 0400 	mov.w	r4, #0
 8002644:	461a      	mov	r2, r3
 8002646:	4623      	mov	r3, r4
 8002648:	f7fd fe12 	bl	8000270 <__aeabi_uldivmod>
 800264c:	4603      	mov	r3, r0
 800264e:	460c      	mov	r4, r1
 8002650:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	60bb      	str	r3, [r7, #8]
      break;
 800266c:	e002      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002670:	60bb      	str	r3, [r7, #8]
      break;
 8002672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08002fb4 	.word	0x08002fb4

080026cc <__errno>:
 80026cc:	4b01      	ldr	r3, [pc, #4]	; (80026d4 <__errno+0x8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4e0d      	ldr	r6, [pc, #52]	; (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026de:	1ba4      	subs	r4, r4, r6
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2500      	movs	r5, #0
 80026e4:	42a5      	cmp	r5, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4e0b      	ldr	r6, [pc, #44]	; (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	; (800271c <__libc_init_array+0x44>)
 80026ec:	f000 fc40 	bl	8002f70 <_init>
 80026f0:	1ba4      	subs	r4, r4, r6
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2500      	movs	r5, #0
 80026f6:	42a5      	cmp	r5, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002700:	4798      	blx	r3
 8002702:	3501      	adds	r5, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800270a:	4798      	blx	r3
 800270c:	3501      	adds	r5, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08002ff8 	.word	0x08002ff8
 8002714:	08002ff8 	.word	0x08002ff8
 8002718:	08002ff8 	.word	0x08002ff8
 800271c:	08002ffc 	.word	0x08002ffc

08002720 <memset>:
 8002720:	4402      	add	r2, r0
 8002722:	4603      	mov	r3, r0
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	f803 1b01 	strb.w	r1, [r3], #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <_vsniprintf_r>:
 8002730:	b530      	push	{r4, r5, lr}
 8002732:	1e14      	subs	r4, r2, #0
 8002734:	4605      	mov	r5, r0
 8002736:	b09b      	sub	sp, #108	; 0x6c
 8002738:	4618      	mov	r0, r3
 800273a:	da05      	bge.n	8002748 <_vsniprintf_r+0x18>
 800273c:	238b      	movs	r3, #139	; 0x8b
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002744:	b01b      	add	sp, #108	; 0x6c
 8002746:	bd30      	pop	{r4, r5, pc}
 8002748:	f44f 7302 	mov.w	r3, #520	; 0x208
 800274c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002750:	bf14      	ite	ne
 8002752:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002756:	4623      	moveq	r3, r4
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	9305      	str	r3, [sp, #20]
 800275c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002760:	9100      	str	r1, [sp, #0]
 8002762:	9104      	str	r1, [sp, #16]
 8002764:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002768:	4602      	mov	r2, r0
 800276a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800276c:	4669      	mov	r1, sp
 800276e:	4628      	mov	r0, r5
 8002770:	f000 f872 	bl	8002858 <_svfiprintf_r>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	bfbc      	itt	lt
 8002778:	238b      	movlt	r3, #139	; 0x8b
 800277a:	602b      	strlt	r3, [r5, #0]
 800277c:	2c00      	cmp	r4, #0
 800277e:	d0e1      	beq.n	8002744 <_vsniprintf_r+0x14>
 8002780:	9b00      	ldr	r3, [sp, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e7dd      	b.n	8002744 <_vsniprintf_r+0x14>

08002788 <vsniprintf>:
 8002788:	b507      	push	{r0, r1, r2, lr}
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	460a      	mov	r2, r1
 8002790:	4601      	mov	r1, r0
 8002792:	4803      	ldr	r0, [pc, #12]	; (80027a0 <vsniprintf+0x18>)
 8002794:	6800      	ldr	r0, [r0, #0]
 8002796:	f7ff ffcb 	bl	8002730 <_vsniprintf_r>
 800279a:	b003      	add	sp, #12
 800279c:	f85d fb04 	ldr.w	pc, [sp], #4
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <__ssputs_r>:
 80027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a8:	688e      	ldr	r6, [r1, #8]
 80027aa:	429e      	cmp	r6, r3
 80027ac:	4682      	mov	sl, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	4690      	mov	r8, r2
 80027b2:	4699      	mov	r9, r3
 80027b4:	d837      	bhi.n	8002826 <__ssputs_r+0x82>
 80027b6:	898a      	ldrh	r2, [r1, #12]
 80027b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027bc:	d031      	beq.n	8002822 <__ssputs_r+0x7e>
 80027be:	6825      	ldr	r5, [r4, #0]
 80027c0:	6909      	ldr	r1, [r1, #16]
 80027c2:	1a6f      	subs	r7, r5, r1
 80027c4:	6965      	ldr	r5, [r4, #20]
 80027c6:	2302      	movs	r3, #2
 80027c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80027d0:	f109 0301 	add.w	r3, r9, #1
 80027d4:	443b      	add	r3, r7
 80027d6:	429d      	cmp	r5, r3
 80027d8:	bf38      	it	cc
 80027da:	461d      	movcc	r5, r3
 80027dc:	0553      	lsls	r3, r2, #21
 80027de:	d530      	bpl.n	8002842 <__ssputs_r+0x9e>
 80027e0:	4629      	mov	r1, r5
 80027e2:	f000 fb2b 	bl	8002e3c <_malloc_r>
 80027e6:	4606      	mov	r6, r0
 80027e8:	b950      	cbnz	r0, 8002800 <__ssputs_r+0x5c>
 80027ea:	230c      	movs	r3, #12
 80027ec:	f8ca 3000 	str.w	r3, [sl]
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f6:	81a3      	strh	r3, [r4, #12]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002800:	463a      	mov	r2, r7
 8002802:	6921      	ldr	r1, [r4, #16]
 8002804:	f000 faa8 	bl	8002d58 <memcpy>
 8002808:	89a3      	ldrh	r3, [r4, #12]
 800280a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	81a3      	strh	r3, [r4, #12]
 8002814:	6126      	str	r6, [r4, #16]
 8002816:	6165      	str	r5, [r4, #20]
 8002818:	443e      	add	r6, r7
 800281a:	1bed      	subs	r5, r5, r7
 800281c:	6026      	str	r6, [r4, #0]
 800281e:	60a5      	str	r5, [r4, #8]
 8002820:	464e      	mov	r6, r9
 8002822:	454e      	cmp	r6, r9
 8002824:	d900      	bls.n	8002828 <__ssputs_r+0x84>
 8002826:	464e      	mov	r6, r9
 8002828:	4632      	mov	r2, r6
 800282a:	4641      	mov	r1, r8
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	f000 fa9e 	bl	8002d6e <memmove>
 8002832:	68a3      	ldr	r3, [r4, #8]
 8002834:	1b9b      	subs	r3, r3, r6
 8002836:	60a3      	str	r3, [r4, #8]
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	441e      	add	r6, r3
 800283c:	6026      	str	r6, [r4, #0]
 800283e:	2000      	movs	r0, #0
 8002840:	e7dc      	b.n	80027fc <__ssputs_r+0x58>
 8002842:	462a      	mov	r2, r5
 8002844:	f000 fb54 	bl	8002ef0 <_realloc_r>
 8002848:	4606      	mov	r6, r0
 800284a:	2800      	cmp	r0, #0
 800284c:	d1e2      	bne.n	8002814 <__ssputs_r+0x70>
 800284e:	6921      	ldr	r1, [r4, #16]
 8002850:	4650      	mov	r0, sl
 8002852:	f000 faa5 	bl	8002da0 <_free_r>
 8002856:	e7c8      	b.n	80027ea <__ssputs_r+0x46>

08002858 <_svfiprintf_r>:
 8002858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285c:	461d      	mov	r5, r3
 800285e:	898b      	ldrh	r3, [r1, #12]
 8002860:	061f      	lsls	r7, r3, #24
 8002862:	b09d      	sub	sp, #116	; 0x74
 8002864:	4680      	mov	r8, r0
 8002866:	460c      	mov	r4, r1
 8002868:	4616      	mov	r6, r2
 800286a:	d50f      	bpl.n	800288c <_svfiprintf_r+0x34>
 800286c:	690b      	ldr	r3, [r1, #16]
 800286e:	b96b      	cbnz	r3, 800288c <_svfiprintf_r+0x34>
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	f000 fae3 	bl	8002e3c <_malloc_r>
 8002876:	6020      	str	r0, [r4, #0]
 8002878:	6120      	str	r0, [r4, #16]
 800287a:	b928      	cbnz	r0, 8002888 <_svfiprintf_r+0x30>
 800287c:	230c      	movs	r3, #12
 800287e:	f8c8 3000 	str.w	r3, [r8]
 8002882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002886:	e0c8      	b.n	8002a1a <_svfiprintf_r+0x1c2>
 8002888:	2340      	movs	r3, #64	; 0x40
 800288a:	6163      	str	r3, [r4, #20]
 800288c:	2300      	movs	r3, #0
 800288e:	9309      	str	r3, [sp, #36]	; 0x24
 8002890:	2320      	movs	r3, #32
 8002892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002896:	2330      	movs	r3, #48	; 0x30
 8002898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800289c:	9503      	str	r5, [sp, #12]
 800289e:	f04f 0b01 	mov.w	fp, #1
 80028a2:	4637      	mov	r7, r6
 80028a4:	463d      	mov	r5, r7
 80028a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028aa:	b10b      	cbz	r3, 80028b0 <_svfiprintf_r+0x58>
 80028ac:	2b25      	cmp	r3, #37	; 0x25
 80028ae:	d13e      	bne.n	800292e <_svfiprintf_r+0xd6>
 80028b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80028b4:	d00b      	beq.n	80028ce <_svfiprintf_r+0x76>
 80028b6:	4653      	mov	r3, sl
 80028b8:	4632      	mov	r2, r6
 80028ba:	4621      	mov	r1, r4
 80028bc:	4640      	mov	r0, r8
 80028be:	f7ff ff71 	bl	80027a4 <__ssputs_r>
 80028c2:	3001      	adds	r0, #1
 80028c4:	f000 80a4 	beq.w	8002a10 <_svfiprintf_r+0x1b8>
 80028c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ca:	4453      	add	r3, sl
 80028cc:	9309      	str	r3, [sp, #36]	; 0x24
 80028ce:	783b      	ldrb	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 809d 	beq.w	8002a10 <_svfiprintf_r+0x1b8>
 80028d6:	2300      	movs	r3, #0
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028e0:	9304      	str	r3, [sp, #16]
 80028e2:	9307      	str	r3, [sp, #28]
 80028e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028e8:	931a      	str	r3, [sp, #104]	; 0x68
 80028ea:	462f      	mov	r7, r5
 80028ec:	2205      	movs	r2, #5
 80028ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028f2:	4850      	ldr	r0, [pc, #320]	; (8002a34 <_svfiprintf_r+0x1dc>)
 80028f4:	f7fd fc6c 	bl	80001d0 <memchr>
 80028f8:	9b04      	ldr	r3, [sp, #16]
 80028fa:	b9d0      	cbnz	r0, 8002932 <_svfiprintf_r+0xda>
 80028fc:	06d9      	lsls	r1, r3, #27
 80028fe:	bf44      	itt	mi
 8002900:	2220      	movmi	r2, #32
 8002902:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002906:	071a      	lsls	r2, r3, #28
 8002908:	bf44      	itt	mi
 800290a:	222b      	movmi	r2, #43	; 0x2b
 800290c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002910:	782a      	ldrb	r2, [r5, #0]
 8002912:	2a2a      	cmp	r2, #42	; 0x2a
 8002914:	d015      	beq.n	8002942 <_svfiprintf_r+0xea>
 8002916:	9a07      	ldr	r2, [sp, #28]
 8002918:	462f      	mov	r7, r5
 800291a:	2000      	movs	r0, #0
 800291c:	250a      	movs	r5, #10
 800291e:	4639      	mov	r1, r7
 8002920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002924:	3b30      	subs	r3, #48	; 0x30
 8002926:	2b09      	cmp	r3, #9
 8002928:	d94d      	bls.n	80029c6 <_svfiprintf_r+0x16e>
 800292a:	b1b8      	cbz	r0, 800295c <_svfiprintf_r+0x104>
 800292c:	e00f      	b.n	800294e <_svfiprintf_r+0xf6>
 800292e:	462f      	mov	r7, r5
 8002930:	e7b8      	b.n	80028a4 <_svfiprintf_r+0x4c>
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <_svfiprintf_r+0x1dc>)
 8002934:	1a80      	subs	r0, r0, r2
 8002936:	fa0b f000 	lsl.w	r0, fp, r0
 800293a:	4318      	orrs	r0, r3
 800293c:	9004      	str	r0, [sp, #16]
 800293e:	463d      	mov	r5, r7
 8002940:	e7d3      	b.n	80028ea <_svfiprintf_r+0x92>
 8002942:	9a03      	ldr	r2, [sp, #12]
 8002944:	1d11      	adds	r1, r2, #4
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	9103      	str	r1, [sp, #12]
 800294a:	2a00      	cmp	r2, #0
 800294c:	db01      	blt.n	8002952 <_svfiprintf_r+0xfa>
 800294e:	9207      	str	r2, [sp, #28]
 8002950:	e004      	b.n	800295c <_svfiprintf_r+0x104>
 8002952:	4252      	negs	r2, r2
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	9207      	str	r2, [sp, #28]
 800295a:	9304      	str	r3, [sp, #16]
 800295c:	783b      	ldrb	r3, [r7, #0]
 800295e:	2b2e      	cmp	r3, #46	; 0x2e
 8002960:	d10c      	bne.n	800297c <_svfiprintf_r+0x124>
 8002962:	787b      	ldrb	r3, [r7, #1]
 8002964:	2b2a      	cmp	r3, #42	; 0x2a
 8002966:	d133      	bne.n	80029d0 <_svfiprintf_r+0x178>
 8002968:	9b03      	ldr	r3, [sp, #12]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	9203      	str	r2, [sp, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	bfb8      	it	lt
 8002974:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002978:	3702      	adds	r7, #2
 800297a:	9305      	str	r3, [sp, #20]
 800297c:	4d2e      	ldr	r5, [pc, #184]	; (8002a38 <_svfiprintf_r+0x1e0>)
 800297e:	7839      	ldrb	r1, [r7, #0]
 8002980:	2203      	movs	r2, #3
 8002982:	4628      	mov	r0, r5
 8002984:	f7fd fc24 	bl	80001d0 <memchr>
 8002988:	b138      	cbz	r0, 800299a <_svfiprintf_r+0x142>
 800298a:	2340      	movs	r3, #64	; 0x40
 800298c:	1b40      	subs	r0, r0, r5
 800298e:	fa03 f000 	lsl.w	r0, r3, r0
 8002992:	9b04      	ldr	r3, [sp, #16]
 8002994:	4303      	orrs	r3, r0
 8002996:	3701      	adds	r7, #1
 8002998:	9304      	str	r3, [sp, #16]
 800299a:	7839      	ldrb	r1, [r7, #0]
 800299c:	4827      	ldr	r0, [pc, #156]	; (8002a3c <_svfiprintf_r+0x1e4>)
 800299e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029a2:	2206      	movs	r2, #6
 80029a4:	1c7e      	adds	r6, r7, #1
 80029a6:	f7fd fc13 	bl	80001d0 <memchr>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d038      	beq.n	8002a20 <_svfiprintf_r+0x1c8>
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <_svfiprintf_r+0x1e8>)
 80029b0:	bb13      	cbnz	r3, 80029f8 <_svfiprintf_r+0x1a0>
 80029b2:	9b03      	ldr	r3, [sp, #12]
 80029b4:	3307      	adds	r3, #7
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	3308      	adds	r3, #8
 80029bc:	9303      	str	r3, [sp, #12]
 80029be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029c0:	444b      	add	r3, r9
 80029c2:	9309      	str	r3, [sp, #36]	; 0x24
 80029c4:	e76d      	b.n	80028a2 <_svfiprintf_r+0x4a>
 80029c6:	fb05 3202 	mla	r2, r5, r2, r3
 80029ca:	2001      	movs	r0, #1
 80029cc:	460f      	mov	r7, r1
 80029ce:	e7a6      	b.n	800291e <_svfiprintf_r+0xc6>
 80029d0:	2300      	movs	r3, #0
 80029d2:	3701      	adds	r7, #1
 80029d4:	9305      	str	r3, [sp, #20]
 80029d6:	4619      	mov	r1, r3
 80029d8:	250a      	movs	r5, #10
 80029da:	4638      	mov	r0, r7
 80029dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029e0:	3a30      	subs	r2, #48	; 0x30
 80029e2:	2a09      	cmp	r2, #9
 80029e4:	d903      	bls.n	80029ee <_svfiprintf_r+0x196>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0c8      	beq.n	800297c <_svfiprintf_r+0x124>
 80029ea:	9105      	str	r1, [sp, #20]
 80029ec:	e7c6      	b.n	800297c <_svfiprintf_r+0x124>
 80029ee:	fb05 2101 	mla	r1, r5, r1, r2
 80029f2:	2301      	movs	r3, #1
 80029f4:	4607      	mov	r7, r0
 80029f6:	e7f0      	b.n	80029da <_svfiprintf_r+0x182>
 80029f8:	ab03      	add	r3, sp, #12
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4622      	mov	r2, r4
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <_svfiprintf_r+0x1ec>)
 8002a00:	a904      	add	r1, sp, #16
 8002a02:	4640      	mov	r0, r8
 8002a04:	f3af 8000 	nop.w
 8002a08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002a0c:	4681      	mov	r9, r0
 8002a0e:	d1d6      	bne.n	80029be <_svfiprintf_r+0x166>
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	065b      	lsls	r3, r3, #25
 8002a14:	f53f af35 	bmi.w	8002882 <_svfiprintf_r+0x2a>
 8002a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a1a:	b01d      	add	sp, #116	; 0x74
 8002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a20:	ab03      	add	r3, sp, #12
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4622      	mov	r2, r4
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <_svfiprintf_r+0x1ec>)
 8002a28:	a904      	add	r1, sp, #16
 8002a2a:	4640      	mov	r0, r8
 8002a2c:	f000 f882 	bl	8002b34 <_printf_i>
 8002a30:	e7ea      	b.n	8002a08 <_svfiprintf_r+0x1b0>
 8002a32:	bf00      	nop
 8002a34:	08002fbc 	.word	0x08002fbc
 8002a38:	08002fc2 	.word	0x08002fc2
 8002a3c:	08002fc6 	.word	0x08002fc6
 8002a40:	00000000 	.word	0x00000000
 8002a44:	080027a5 	.word	0x080027a5

08002a48 <_printf_common>:
 8002a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4c:	4691      	mov	r9, r2
 8002a4e:	461f      	mov	r7, r3
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	690b      	ldr	r3, [r1, #16]
 8002a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bfb8      	it	lt
 8002a5c:	4613      	movlt	r3, r2
 8002a5e:	f8c9 3000 	str.w	r3, [r9]
 8002a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a66:	4606      	mov	r6, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	b112      	cbz	r2, 8002a72 <_printf_common+0x2a>
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f8c9 3000 	str.w	r3, [r9]
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	0699      	lsls	r1, r3, #26
 8002a76:	bf42      	ittt	mi
 8002a78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a7c:	3302      	addmi	r3, #2
 8002a7e:	f8c9 3000 	strmi.w	r3, [r9]
 8002a82:	6825      	ldr	r5, [r4, #0]
 8002a84:	f015 0506 	ands.w	r5, r5, #6
 8002a88:	d107      	bne.n	8002a9a <_printf_common+0x52>
 8002a8a:	f104 0a19 	add.w	sl, r4, #25
 8002a8e:	68e3      	ldr	r3, [r4, #12]
 8002a90:	f8d9 2000 	ldr.w	r2, [r9]
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	42ab      	cmp	r3, r5
 8002a98:	dc28      	bgt.n	8002aec <_printf_common+0xa4>
 8002a9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a9e:	6822      	ldr	r2, [r4, #0]
 8002aa0:	3300      	adds	r3, #0
 8002aa2:	bf18      	it	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	0692      	lsls	r2, r2, #26
 8002aa8:	d42d      	bmi.n	8002b06 <_printf_common+0xbe>
 8002aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aae:	4639      	mov	r1, r7
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	47c0      	blx	r8
 8002ab4:	3001      	adds	r0, #1
 8002ab6:	d020      	beq.n	8002afa <_printf_common+0xb2>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	68e5      	ldr	r5, [r4, #12]
 8002abc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ac0:	f003 0306 	and.w	r3, r3, #6
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	bf08      	it	eq
 8002ac8:	1aad      	subeq	r5, r5, r2
 8002aca:	68a3      	ldr	r3, [r4, #8]
 8002acc:	6922      	ldr	r2, [r4, #16]
 8002ace:	bf0c      	ite	eq
 8002ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ad4:	2500      	movne	r5, #0
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	bfc4      	itt	gt
 8002ada:	1a9b      	subgt	r3, r3, r2
 8002adc:	18ed      	addgt	r5, r5, r3
 8002ade:	f04f 0900 	mov.w	r9, #0
 8002ae2:	341a      	adds	r4, #26
 8002ae4:	454d      	cmp	r5, r9
 8002ae6:	d11a      	bne.n	8002b1e <_printf_common+0xd6>
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e008      	b.n	8002afe <_printf_common+0xb6>
 8002aec:	2301      	movs	r3, #1
 8002aee:	4652      	mov	r2, sl
 8002af0:	4639      	mov	r1, r7
 8002af2:	4630      	mov	r0, r6
 8002af4:	47c0      	blx	r8
 8002af6:	3001      	adds	r0, #1
 8002af8:	d103      	bne.n	8002b02 <_printf_common+0xba>
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b02:	3501      	adds	r5, #1
 8002b04:	e7c3      	b.n	8002a8e <_printf_common+0x46>
 8002b06:	18e1      	adds	r1, r4, r3
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	2030      	movs	r0, #48	; 0x30
 8002b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b10:	4422      	add	r2, r4
 8002b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	e7c5      	b.n	8002aaa <_printf_common+0x62>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4622      	mov	r2, r4
 8002b22:	4639      	mov	r1, r7
 8002b24:	4630      	mov	r0, r6
 8002b26:	47c0      	blx	r8
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d0e6      	beq.n	8002afa <_printf_common+0xb2>
 8002b2c:	f109 0901 	add.w	r9, r9, #1
 8002b30:	e7d8      	b.n	8002ae4 <_printf_common+0x9c>
	...

08002b34 <_printf_i>:
 8002b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	7e09      	ldrb	r1, [r1, #24]
 8002b40:	b085      	sub	sp, #20
 8002b42:	296e      	cmp	r1, #110	; 0x6e
 8002b44:	4617      	mov	r7, r2
 8002b46:	4606      	mov	r6, r0
 8002b48:	4698      	mov	r8, r3
 8002b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b4c:	f000 80b3 	beq.w	8002cb6 <_printf_i+0x182>
 8002b50:	d822      	bhi.n	8002b98 <_printf_i+0x64>
 8002b52:	2963      	cmp	r1, #99	; 0x63
 8002b54:	d036      	beq.n	8002bc4 <_printf_i+0x90>
 8002b56:	d80a      	bhi.n	8002b6e <_printf_i+0x3a>
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	f000 80b9 	beq.w	8002cd0 <_printf_i+0x19c>
 8002b5e:	2958      	cmp	r1, #88	; 0x58
 8002b60:	f000 8083 	beq.w	8002c6a <_printf_i+0x136>
 8002b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b6c:	e032      	b.n	8002bd4 <_printf_i+0xa0>
 8002b6e:	2964      	cmp	r1, #100	; 0x64
 8002b70:	d001      	beq.n	8002b76 <_printf_i+0x42>
 8002b72:	2969      	cmp	r1, #105	; 0x69
 8002b74:	d1f6      	bne.n	8002b64 <_printf_i+0x30>
 8002b76:	6820      	ldr	r0, [r4, #0]
 8002b78:	6813      	ldr	r3, [r2, #0]
 8002b7a:	0605      	lsls	r5, r0, #24
 8002b7c:	f103 0104 	add.w	r1, r3, #4
 8002b80:	d52a      	bpl.n	8002bd8 <_printf_i+0xa4>
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da03      	bge.n	8002b92 <_printf_i+0x5e>
 8002b8a:	222d      	movs	r2, #45	; 0x2d
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b92:	486f      	ldr	r0, [pc, #444]	; (8002d50 <_printf_i+0x21c>)
 8002b94:	220a      	movs	r2, #10
 8002b96:	e039      	b.n	8002c0c <_printf_i+0xd8>
 8002b98:	2973      	cmp	r1, #115	; 0x73
 8002b9a:	f000 809d 	beq.w	8002cd8 <_printf_i+0x1a4>
 8002b9e:	d808      	bhi.n	8002bb2 <_printf_i+0x7e>
 8002ba0:	296f      	cmp	r1, #111	; 0x6f
 8002ba2:	d020      	beq.n	8002be6 <_printf_i+0xb2>
 8002ba4:	2970      	cmp	r1, #112	; 0x70
 8002ba6:	d1dd      	bne.n	8002b64 <_printf_i+0x30>
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f043 0320 	orr.w	r3, r3, #32
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	e003      	b.n	8002bba <_printf_i+0x86>
 8002bb2:	2975      	cmp	r1, #117	; 0x75
 8002bb4:	d017      	beq.n	8002be6 <_printf_i+0xb2>
 8002bb6:	2978      	cmp	r1, #120	; 0x78
 8002bb8:	d1d4      	bne.n	8002b64 <_printf_i+0x30>
 8002bba:	2378      	movs	r3, #120	; 0x78
 8002bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bc0:	4864      	ldr	r0, [pc, #400]	; (8002d54 <_printf_i+0x220>)
 8002bc2:	e055      	b.n	8002c70 <_printf_i+0x13c>
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	1d19      	adds	r1, r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6011      	str	r1, [r2, #0]
 8002bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e08c      	b.n	8002cf2 <_printf_i+0x1be>
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6011      	str	r1, [r2, #0]
 8002bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002be0:	bf18      	it	ne
 8002be2:	b21b      	sxthne	r3, r3
 8002be4:	e7cf      	b.n	8002b86 <_printf_i+0x52>
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	6825      	ldr	r5, [r4, #0]
 8002bea:	1d18      	adds	r0, r3, #4
 8002bec:	6010      	str	r0, [r2, #0]
 8002bee:	0628      	lsls	r0, r5, #24
 8002bf0:	d501      	bpl.n	8002bf6 <_printf_i+0xc2>
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e002      	b.n	8002bfc <_printf_i+0xc8>
 8002bf6:	0668      	lsls	r0, r5, #25
 8002bf8:	d5fb      	bpl.n	8002bf2 <_printf_i+0xbe>
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	4854      	ldr	r0, [pc, #336]	; (8002d50 <_printf_i+0x21c>)
 8002bfe:	296f      	cmp	r1, #111	; 0x6f
 8002c00:	bf14      	ite	ne
 8002c02:	220a      	movne	r2, #10
 8002c04:	2208      	moveq	r2, #8
 8002c06:	2100      	movs	r1, #0
 8002c08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c0c:	6865      	ldr	r5, [r4, #4]
 8002c0e:	60a5      	str	r5, [r4, #8]
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	f2c0 8095 	blt.w	8002d40 <_printf_i+0x20c>
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	f021 0104 	bic.w	r1, r1, #4
 8002c1c:	6021      	str	r1, [r4, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d13d      	bne.n	8002c9e <_printf_i+0x16a>
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	f040 808e 	bne.w	8002d44 <_printf_i+0x210>
 8002c28:	4665      	mov	r5, ip
 8002c2a:	2a08      	cmp	r2, #8
 8002c2c:	d10b      	bne.n	8002c46 <_printf_i+0x112>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	07db      	lsls	r3, r3, #31
 8002c32:	d508      	bpl.n	8002c46 <_printf_i+0x112>
 8002c34:	6923      	ldr	r3, [r4, #16]
 8002c36:	6862      	ldr	r2, [r4, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	bfde      	ittt	le
 8002c3c:	2330      	movle	r3, #48	; 0x30
 8002c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c42:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c46:	ebac 0305 	sub.w	r3, ip, r5
 8002c4a:	6123      	str	r3, [r4, #16]
 8002c4c:	f8cd 8000 	str.w	r8, [sp]
 8002c50:	463b      	mov	r3, r7
 8002c52:	aa03      	add	r2, sp, #12
 8002c54:	4621      	mov	r1, r4
 8002c56:	4630      	mov	r0, r6
 8002c58:	f7ff fef6 	bl	8002a48 <_printf_common>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d14d      	bne.n	8002cfc <_printf_i+0x1c8>
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c64:	b005      	add	sp, #20
 8002c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c6a:	4839      	ldr	r0, [pc, #228]	; (8002d50 <_printf_i+0x21c>)
 8002c6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c70:	6813      	ldr	r3, [r2, #0]
 8002c72:	6821      	ldr	r1, [r4, #0]
 8002c74:	1d1d      	adds	r5, r3, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6015      	str	r5, [r2, #0]
 8002c7a:	060a      	lsls	r2, r1, #24
 8002c7c:	d50b      	bpl.n	8002c96 <_printf_i+0x162>
 8002c7e:	07ca      	lsls	r2, r1, #31
 8002c80:	bf44      	itt	mi
 8002c82:	f041 0120 	orrmi.w	r1, r1, #32
 8002c86:	6021      	strmi	r1, [r4, #0]
 8002c88:	b91b      	cbnz	r3, 8002c92 <_printf_i+0x15e>
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	f022 0220 	bic.w	r2, r2, #32
 8002c90:	6022      	str	r2, [r4, #0]
 8002c92:	2210      	movs	r2, #16
 8002c94:	e7b7      	b.n	8002c06 <_printf_i+0xd2>
 8002c96:	064d      	lsls	r5, r1, #25
 8002c98:	bf48      	it	mi
 8002c9a:	b29b      	uxthmi	r3, r3
 8002c9c:	e7ef      	b.n	8002c7e <_printf_i+0x14a>
 8002c9e:	4665      	mov	r5, ip
 8002ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ca4:	fb02 3311 	mls	r3, r2, r1, r3
 8002ca8:	5cc3      	ldrb	r3, [r0, r3]
 8002caa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cae:	460b      	mov	r3, r1
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d1f5      	bne.n	8002ca0 <_printf_i+0x16c>
 8002cb4:	e7b9      	b.n	8002c2a <_printf_i+0xf6>
 8002cb6:	6813      	ldr	r3, [r2, #0]
 8002cb8:	6825      	ldr	r5, [r4, #0]
 8002cba:	6961      	ldr	r1, [r4, #20]
 8002cbc:	1d18      	adds	r0, r3, #4
 8002cbe:	6010      	str	r0, [r2, #0]
 8002cc0:	0628      	lsls	r0, r5, #24
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	d501      	bpl.n	8002cca <_printf_i+0x196>
 8002cc6:	6019      	str	r1, [r3, #0]
 8002cc8:	e002      	b.n	8002cd0 <_printf_i+0x19c>
 8002cca:	066a      	lsls	r2, r5, #25
 8002ccc:	d5fb      	bpl.n	8002cc6 <_printf_i+0x192>
 8002cce:	8019      	strh	r1, [r3, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6123      	str	r3, [r4, #16]
 8002cd4:	4665      	mov	r5, ip
 8002cd6:	e7b9      	b.n	8002c4c <_printf_i+0x118>
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	1d19      	adds	r1, r3, #4
 8002cdc:	6011      	str	r1, [r2, #0]
 8002cde:	681d      	ldr	r5, [r3, #0]
 8002ce0:	6862      	ldr	r2, [r4, #4]
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f7fd fa73 	bl	80001d0 <memchr>
 8002cea:	b108      	cbz	r0, 8002cf0 <_printf_i+0x1bc>
 8002cec:	1b40      	subs	r0, r0, r5
 8002cee:	6060      	str	r0, [r4, #4]
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cfa:	e7a7      	b.n	8002c4c <_printf_i+0x118>
 8002cfc:	6923      	ldr	r3, [r4, #16]
 8002cfe:	462a      	mov	r2, r5
 8002d00:	4639      	mov	r1, r7
 8002d02:	4630      	mov	r0, r6
 8002d04:	47c0      	blx	r8
 8002d06:	3001      	adds	r0, #1
 8002d08:	d0aa      	beq.n	8002c60 <_printf_i+0x12c>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	079b      	lsls	r3, r3, #30
 8002d0e:	d413      	bmi.n	8002d38 <_printf_i+0x204>
 8002d10:	68e0      	ldr	r0, [r4, #12]
 8002d12:	9b03      	ldr	r3, [sp, #12]
 8002d14:	4298      	cmp	r0, r3
 8002d16:	bfb8      	it	lt
 8002d18:	4618      	movlt	r0, r3
 8002d1a:	e7a3      	b.n	8002c64 <_printf_i+0x130>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	464a      	mov	r2, r9
 8002d20:	4639      	mov	r1, r7
 8002d22:	4630      	mov	r0, r6
 8002d24:	47c0      	blx	r8
 8002d26:	3001      	adds	r0, #1
 8002d28:	d09a      	beq.n	8002c60 <_printf_i+0x12c>
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	68e3      	ldr	r3, [r4, #12]
 8002d2e:	9a03      	ldr	r2, [sp, #12]
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	42ab      	cmp	r3, r5
 8002d34:	dcf2      	bgt.n	8002d1c <_printf_i+0x1e8>
 8002d36:	e7eb      	b.n	8002d10 <_printf_i+0x1dc>
 8002d38:	2500      	movs	r5, #0
 8002d3a:	f104 0919 	add.w	r9, r4, #25
 8002d3e:	e7f5      	b.n	8002d2c <_printf_i+0x1f8>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ac      	bne.n	8002c9e <_printf_i+0x16a>
 8002d44:	7803      	ldrb	r3, [r0, #0]
 8002d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d4e:	e76c      	b.n	8002c2a <_printf_i+0xf6>
 8002d50:	08002fcd 	.word	0x08002fcd
 8002d54:	08002fde 	.word	0x08002fde

08002d58 <memcpy>:
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	1e43      	subs	r3, r0, #1
 8002d5c:	440a      	add	r2, r1
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	d100      	bne.n	8002d64 <memcpy+0xc>
 8002d62:	bd10      	pop	{r4, pc}
 8002d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d6c:	e7f7      	b.n	8002d5e <memcpy+0x6>

08002d6e <memmove>:
 8002d6e:	4288      	cmp	r0, r1
 8002d70:	b510      	push	{r4, lr}
 8002d72:	eb01 0302 	add.w	r3, r1, r2
 8002d76:	d807      	bhi.n	8002d88 <memmove+0x1a>
 8002d78:	1e42      	subs	r2, r0, #1
 8002d7a:	4299      	cmp	r1, r3
 8002d7c:	d00a      	beq.n	8002d94 <memmove+0x26>
 8002d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d86:	e7f8      	b.n	8002d7a <memmove+0xc>
 8002d88:	4283      	cmp	r3, r0
 8002d8a:	d9f5      	bls.n	8002d78 <memmove+0xa>
 8002d8c:	1881      	adds	r1, r0, r2
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	42d3      	cmn	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memmove+0x28>
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d9e:	e7f7      	b.n	8002d90 <memmove+0x22>

08002da0 <_free_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4605      	mov	r5, r0
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d045      	beq.n	8002e34 <_free_r+0x94>
 8002da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dac:	1f0c      	subs	r4, r1, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bfb8      	it	lt
 8002db2:	18e4      	addlt	r4, r4, r3
 8002db4:	f000 f8d2 	bl	8002f5c <__malloc_lock>
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <_free_r+0x98>)
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	b933      	cbnz	r3, 8002dce <_free_r+0x2e>
 8002dc0:	6063      	str	r3, [r4, #4]
 8002dc2:	6014      	str	r4, [r2, #0]
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dca:	f000 b8c8 	b.w	8002f5e <__malloc_unlock>
 8002dce:	42a3      	cmp	r3, r4
 8002dd0:	d90c      	bls.n	8002dec <_free_r+0x4c>
 8002dd2:	6821      	ldr	r1, [r4, #0]
 8002dd4:	1862      	adds	r2, r4, r1
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	bf04      	itt	eq
 8002dda:	681a      	ldreq	r2, [r3, #0]
 8002ddc:	685b      	ldreq	r3, [r3, #4]
 8002dde:	6063      	str	r3, [r4, #4]
 8002de0:	bf04      	itt	eq
 8002de2:	1852      	addeq	r2, r2, r1
 8002de4:	6022      	streq	r2, [r4, #0]
 8002de6:	6004      	str	r4, [r0, #0]
 8002de8:	e7ec      	b.n	8002dc4 <_free_r+0x24>
 8002dea:	4613      	mov	r3, r2
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	b10a      	cbz	r2, 8002df4 <_free_r+0x54>
 8002df0:	42a2      	cmp	r2, r4
 8002df2:	d9fa      	bls.n	8002dea <_free_r+0x4a>
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	1858      	adds	r0, r3, r1
 8002df8:	42a0      	cmp	r0, r4
 8002dfa:	d10b      	bne.n	8002e14 <_free_r+0x74>
 8002dfc:	6820      	ldr	r0, [r4, #0]
 8002dfe:	4401      	add	r1, r0
 8002e00:	1858      	adds	r0, r3, r1
 8002e02:	4282      	cmp	r2, r0
 8002e04:	6019      	str	r1, [r3, #0]
 8002e06:	d1dd      	bne.n	8002dc4 <_free_r+0x24>
 8002e08:	6810      	ldr	r0, [r2, #0]
 8002e0a:	6852      	ldr	r2, [r2, #4]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	4401      	add	r1, r0
 8002e10:	6019      	str	r1, [r3, #0]
 8002e12:	e7d7      	b.n	8002dc4 <_free_r+0x24>
 8002e14:	d902      	bls.n	8002e1c <_free_r+0x7c>
 8002e16:	230c      	movs	r3, #12
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	e7d3      	b.n	8002dc4 <_free_r+0x24>
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	1821      	adds	r1, r4, r0
 8002e20:	428a      	cmp	r2, r1
 8002e22:	bf04      	itt	eq
 8002e24:	6811      	ldreq	r1, [r2, #0]
 8002e26:	6852      	ldreq	r2, [r2, #4]
 8002e28:	6062      	str	r2, [r4, #4]
 8002e2a:	bf04      	itt	eq
 8002e2c:	1809      	addeq	r1, r1, r0
 8002e2e:	6021      	streq	r1, [r4, #0]
 8002e30:	605c      	str	r4, [r3, #4]
 8002e32:	e7c7      	b.n	8002dc4 <_free_r+0x24>
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
 8002e36:	bf00      	nop
 8002e38:	200000e4 	.word	0x200000e4

08002e3c <_malloc_r>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	1ccd      	adds	r5, r1, #3
 8002e40:	f025 0503 	bic.w	r5, r5, #3
 8002e44:	3508      	adds	r5, #8
 8002e46:	2d0c      	cmp	r5, #12
 8002e48:	bf38      	it	cc
 8002e4a:	250c      	movcc	r5, #12
 8002e4c:	2d00      	cmp	r5, #0
 8002e4e:	4606      	mov	r6, r0
 8002e50:	db01      	blt.n	8002e56 <_malloc_r+0x1a>
 8002e52:	42a9      	cmp	r1, r5
 8002e54:	d903      	bls.n	8002e5e <_malloc_r+0x22>
 8002e56:	230c      	movs	r3, #12
 8002e58:	6033      	str	r3, [r6, #0]
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	f000 f87d 	bl	8002f5c <__malloc_lock>
 8002e62:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <_malloc_r+0xac>)
 8002e64:	6814      	ldr	r4, [r2, #0]
 8002e66:	4621      	mov	r1, r4
 8002e68:	b991      	cbnz	r1, 8002e90 <_malloc_r+0x54>
 8002e6a:	4c20      	ldr	r4, [pc, #128]	; (8002eec <_malloc_r+0xb0>)
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	b91b      	cbnz	r3, 8002e78 <_malloc_r+0x3c>
 8002e70:	4630      	mov	r0, r6
 8002e72:	f000 f863 	bl	8002f3c <_sbrk_r>
 8002e76:	6020      	str	r0, [r4, #0]
 8002e78:	4629      	mov	r1, r5
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f000 f85e 	bl	8002f3c <_sbrk_r>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d124      	bne.n	8002ece <_malloc_r+0x92>
 8002e84:	230c      	movs	r3, #12
 8002e86:	6033      	str	r3, [r6, #0]
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f000 f868 	bl	8002f5e <__malloc_unlock>
 8002e8e:	e7e4      	b.n	8002e5a <_malloc_r+0x1e>
 8002e90:	680b      	ldr	r3, [r1, #0]
 8002e92:	1b5b      	subs	r3, r3, r5
 8002e94:	d418      	bmi.n	8002ec8 <_malloc_r+0x8c>
 8002e96:	2b0b      	cmp	r3, #11
 8002e98:	d90f      	bls.n	8002eba <_malloc_r+0x7e>
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	50cd      	str	r5, [r1, r3]
 8002e9e:	18cc      	adds	r4, r1, r3
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f000 f85c 	bl	8002f5e <__malloc_unlock>
 8002ea6:	f104 000b 	add.w	r0, r4, #11
 8002eaa:	1d23      	adds	r3, r4, #4
 8002eac:	f020 0007 	bic.w	r0, r0, #7
 8002eb0:	1ac3      	subs	r3, r0, r3
 8002eb2:	d0d3      	beq.n	8002e5c <_malloc_r+0x20>
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	50e2      	str	r2, [r4, r3]
 8002eb8:	e7d0      	b.n	8002e5c <_malloc_r+0x20>
 8002eba:	428c      	cmp	r4, r1
 8002ebc:	684b      	ldr	r3, [r1, #4]
 8002ebe:	bf16      	itet	ne
 8002ec0:	6063      	strne	r3, [r4, #4]
 8002ec2:	6013      	streq	r3, [r2, #0]
 8002ec4:	460c      	movne	r4, r1
 8002ec6:	e7eb      	b.n	8002ea0 <_malloc_r+0x64>
 8002ec8:	460c      	mov	r4, r1
 8002eca:	6849      	ldr	r1, [r1, #4]
 8002ecc:	e7cc      	b.n	8002e68 <_malloc_r+0x2c>
 8002ece:	1cc4      	adds	r4, r0, #3
 8002ed0:	f024 0403 	bic.w	r4, r4, #3
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d005      	beq.n	8002ee4 <_malloc_r+0xa8>
 8002ed8:	1a21      	subs	r1, r4, r0
 8002eda:	4630      	mov	r0, r6
 8002edc:	f000 f82e 	bl	8002f3c <_sbrk_r>
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d0cf      	beq.n	8002e84 <_malloc_r+0x48>
 8002ee4:	6025      	str	r5, [r4, #0]
 8002ee6:	e7db      	b.n	8002ea0 <_malloc_r+0x64>
 8002ee8:	200000e4 	.word	0x200000e4
 8002eec:	200000e8 	.word	0x200000e8

08002ef0 <_realloc_r>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	4607      	mov	r7, r0
 8002ef4:	4614      	mov	r4, r2
 8002ef6:	460e      	mov	r6, r1
 8002ef8:	b921      	cbnz	r1, 8002f04 <_realloc_r+0x14>
 8002efa:	4611      	mov	r1, r2
 8002efc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f00:	f7ff bf9c 	b.w	8002e3c <_malloc_r>
 8002f04:	b922      	cbnz	r2, 8002f10 <_realloc_r+0x20>
 8002f06:	f7ff ff4b 	bl	8002da0 <_free_r>
 8002f0a:	4625      	mov	r5, r4
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f10:	f000 f826 	bl	8002f60 <_malloc_usable_size_r>
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d20f      	bcs.n	8002f38 <_realloc_r+0x48>
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f7ff ff8e 	bl	8002e3c <_malloc_r>
 8002f20:	4605      	mov	r5, r0
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d0f2      	beq.n	8002f0c <_realloc_r+0x1c>
 8002f26:	4631      	mov	r1, r6
 8002f28:	4622      	mov	r2, r4
 8002f2a:	f7ff ff15 	bl	8002d58 <memcpy>
 8002f2e:	4631      	mov	r1, r6
 8002f30:	4638      	mov	r0, r7
 8002f32:	f7ff ff35 	bl	8002da0 <_free_r>
 8002f36:	e7e9      	b.n	8002f0c <_realloc_r+0x1c>
 8002f38:	4635      	mov	r5, r6
 8002f3a:	e7e7      	b.n	8002f0c <_realloc_r+0x1c>

08002f3c <_sbrk_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4c06      	ldr	r4, [pc, #24]	; (8002f58 <_sbrk_r+0x1c>)
 8002f40:	2300      	movs	r3, #0
 8002f42:	4605      	mov	r5, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	6023      	str	r3, [r4, #0]
 8002f48:	f7fd fea0 	bl	8000c8c <_sbrk>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_sbrk_r+0x1a>
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_sbrk_r+0x1a>
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	200000f0 	.word	0x200000f0

08002f5c <__malloc_lock>:
 8002f5c:	4770      	bx	lr

08002f5e <__malloc_unlock>:
 8002f5e:	4770      	bx	lr

08002f60 <_malloc_usable_size_r>:
 8002f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f64:	1f18      	subs	r0, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bfbc      	itt	lt
 8002f6a:	580b      	ldrlt	r3, [r1, r0]
 8002f6c:	18c0      	addlt	r0, r0, r3
 8002f6e:	4770      	bx	lr

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
